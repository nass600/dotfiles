# Theme
P10K_COLOR_PRIMARY=33     # blue
P10K_COLOR_TEXT=255       # white
P10K_COLOR_TEXT_ACCENT=15 # bright white
P10K_COLOR_ERROR=9        # bright red
P10K_COLOR_DARK=234       # dark gray

POWERLEVEL9K_INSTANT_PROMPT=quiet

# Segments
POWERLEVEL9K_MODE=nerdfont-complete
POWERLEVEL9K_PROMPT_ADD_NEWLINE=false
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    os_icon
    root_indicator
    dir
)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
    status
    virtualenv
    pyenv
    nvm
    vcs
    time
)


# Dirs
POWERLEVEL9K_DIR_PATH_SEPARATOR="%F{$P10K_COLOR_DARK} $(print $'\uE0B1') %F{white}"
POWERLEVEL9K_DIR_FOREGROUND=$P10K_COLOR_TEXT
POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=$P10K_COLOR_TEXT
POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=$P10K_COLOR_TEXT_ACCENT
POWERLEVEL9K_DIR_BACKGROUND=$P10K_COLOR_PRIMARY
POWERLEVEL9K_DIR_ANCHOR_BOLD=true

# OS icon
POWERLEVEL9K_OS_ICON_FOREGROUND=15
POWERLEVEL9K_OS_ICON_BACKGROUND=$P10K_COLOR_DARK

# Time
POWERLEVEL9K_TIME_FORMAT='%D{%H:%M}'
POWERLEVEL9K_TIME_FOREGROUND=$P10K_COLOR_PRIMARY
POWERLEVEL9K_TIME_BACKGROUND=$P10K_COLOR_DARK # dark gray

# Status
POWERLEVEL9K_STATUS_OK=false
POWERLEVEL9K_STATUS_OK_PIPE=false
POWERLEVEL9K_STATUS_BACKGROUND=$P10K_COLOR_DARK
POWERLEVEL9K_STATUS_ERROR_FOREGROUND=$P10K_COLOR_ERROR
POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=$P10K_COLOR_ERROR

# Virtualenv
POWERLEVEL9K_VIRTUALENV_FOREGROUND=15 # bright white
POWERLEVEL9K_VIRTUALENV_BACKGROUND=33 # light blue

# Git
POWERLEVEL9K_VCS_CLEAN_BACKGROUND=40 # green
POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=208 # orange
POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=208 # orange
POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=$P10K_COLOR_DARK
POWERLEVEL9K_VCS_TAG_ICON='\uF02B'

function my_git_formatter() {
    emulate -L zsh

    if [[ -n $P9K_CONTENT ]]; then
      # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
      # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
      typeset -g my_git_format=$P9K_CONTENT
      return
    fi

    # Styling for up-to-date Git status.
    local       meta=%${P10K_COLOR_DARK}F  # grey foreground
    local      clean=%${P10K_COLOR_DARK}F   # green foreground
    local   modified=%${P10K_COLOR_DARK}F  # yellow foreground
    local  untracked=%${P10K_COLOR_DARK}F   # blue foreground
    local conflicted=%${P10K_COLOR_ERROR}F  # red foreground

    local res

    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
      local branch=${(V)VCS_STATUS_LOCAL_BRANCH}
      # If local branch name is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      # Tip: To always show local branch name in full without truncation, delete the next line.
      (( $#branch > 32 )) && branch[13,-13]="…"  # <-- this line
      res+="${clean}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}${branch//\%/%%}"
    fi

    if [[ -n $VCS_STATUS_TAG ]]; then
      local tag=${(V)VCS_STATUS_TAG}
      res+="${meta} ${(g::)POWERLEVEL9K_VCS_TAG_ICON}${clean}${tag//\%/%%}"
    fi

    # Display the current Git commit if there is no branch and no tag.
    # Tip: To always display the current Git commit, delete the next line.
    [[ -z $VCS_STATUS_LOCAL_BRANCH && -z $VCS_STATUS_TAG ]] &&  # <-- this line
      res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"

    # Show tracking branch name if it differs from local branch.
    if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
      res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"
    fi

    # Display "wip" if the latest commit's summary contains "wip" or "WIP".
    if [[ $VCS_STATUS_COMMIT_SUMMARY == (|*[^[:alnum:]])(wip|WIP)(|[^[:alnum:]]*) ]]; then
      res+=" ${modified}wip"
    fi

    # ⇣42 if behind the remote.
    (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
    # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
    (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
    (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
    # ⇠42 if behind the push remote.
    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
    (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" "
    # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
    (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && res+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
    # *42 if have stashes.
    (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"
    # 'merge' if the repo is in an unusual state.
    [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"
    # ~42 if have merge conflicts.
    (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
    # +42 if have staged changes.
    (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
    # !42 if have unstaged changes.
    (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
    # ?42 if have untracked files. It's really a question mark, your font isn't broken.
    # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.
    # Remove the next line if you don't want to see untracked files at all.
    (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"
    # "─" if the number of unstaged files is unknown. This can happen due to
    # POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY (see below) being set to a non-negative number lower
    # than the number of files in the Git index, or due to bash.showDirtyState being set to false
    # in the repository config. The number of staged and untracked files may also be unknown
    # in this case.
    (( VCS_STATUS_HAS_UNSTAGED == -1 )) && res+=" ${modified}─"

    typeset -g my_git_format=$res
}
functions -M my_git_formatter 2>/dev/null

# function my_git_color() {
#     eval "function my_git_formatter() {
#         ${(S)functions[my_git_formatter]/ $1=\'*\'/ $1='%$2F'}
#     }"
# }

# my_git_color meta       $P10K_COLOR_DARK
# my_git_color clean      $P10K_COLOR_DARK
# my_git_color modified   $P10K_COLOR_DARK
# my_git_color untracked  $P10K_COLOR_DARK
# my_git_color conflicted $P10K_COLOR_ERROR

# Icons
POWERLEVEL9K_TIME_ICON=''
POWERLEVEL9K_HOME_ICON=''
POWERLEVEL9K_HOME_SUB_ICON=''
POWERLEVEL9K_FOLDER_ICON=''
